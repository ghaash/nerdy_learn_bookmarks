cernan 3/21 meeting
^rails g scaffold favorites list:string
rails g migration CreateJoinTableFavoritesBookmarks favorite bookmarks
add associations to favorite and user models
in index.html.erb use :list to save to db?
use ransack gem to make bookmarks searchable?

PLAN OF ATTACK
like avi said "get it working and build on features"

1. set up bookmarks, favorites - get them working
2. add requirementsrail

bookmarks needs:
  controller - setup by scaffolding (needs strong params)
  model - has_many :bookmarks (belongs_to search?)
  views -  add params to forms, create/show needs to display clickable clicks
  db - table, bookmarsk need a title, type(interview, coding), description, reading length, URL
  route - scaffolding

application needs
controller - set up with helpers and logged in adsfdfas
model - blank
views - none

user needs
controller - CRUD with params/devise
model - devise, enum
views - crud
db: HAVE DEVISE DO THIS OR YOU'LL BE SORRY
omniauth for facebook/twitter/tumblr/instagram
http://railscasts.com/episodes/370-ransack

Search
elastic search gem
ferret gem
http://railscasts.com/episodes/37-simple-search-form
http://www.rymcmahon.com/articles/2
apparently no need for an extra controller

Favorites
needs model and views and controller and db
http://stackoverflow.com/questions/13240109/implement-add-to-favorites-in-rails-3-4

requirements
4&5!!!

1 Use the Ruby on Rails framework.
//Done!

2 Your models must include a has_many, a belongs_to, and a has_many :through relationship. You can include more models to fill out your domain, but there must be at least a model acting as a join table for the has_many through.
//bookmarks model; has_many bookmarks, belongs_to user, user model set up by devise, favorites has_many :favorites :through :bookmarks


3 Your models should include reasonable validations for the simple attributes. You don't need to add every possible validation or duplicates, such as presence and a minimum length, but the models should defend against invalid data.
//for example
class Person < ActiveRecord::Base
  validates :name, format: { without: /[0-9]/, message: "does not allow numbers" }
  validates :email, uniqueness: true
end
valid? checks in controllers

4 You must include at least one class level ActiveRecord scope methods. To some extent these class scopes can be added to power a specific individual feature, such as "My Overdue Tasks" in a TODO application, scoping all tasks for the user by a datetime scope for overdue items, @user.tasks.overdue. Reports make for a good usage of class scopes, such as "Most Valuable Cart by Customer" where the code would implement a Cart.most_valuable and Cart.by_customer which could be combined as Cart.most_valuable.by_customer(@customer).
??????????????
//most_popular.by_favorites for the more looked at bookmarks
https://learn.co/tracks/full-stack-web-dev-with-react/rails/refactoring-with-helpers-and-model-methods/model-class-methods
validates :title, uniqueness: {
  scope: [:release_year, :artist_name],
  message: "cannot be repeated by the same artist in the same year"
}

5 You must include a nested form that writes to an associated model through a custom attribute writer. An example of this would be a New Recipe form that allowed you to add ingredients that are unique across recipes (thereby requiring a join model, or imagine being able to see all recipes that include Chicken), along with a quantity or description of the ingredient in the recipe. On this form you would have a series of fields named recipe[ingredient_attributes][0][name] and recipe[ingredient_attributes][0][description] which would write to the recipe model through a method ingredient_attributes=. This method cannot be provided via the accepts_nested_attributes_for macro because the custom writer would be responsible for finding or creating a recipe by name and then creating the row in the join model recipe_ingredients with the recipe_id, the ingredient_id, and the description from the form.
???????????????????????????????????????????????????????
//class Song < ActiveRecord::Base
  def artist_attributes=(artist)
    self.artist = Artist.find_or_create_by(name: artist.name)
    self.artist.update(artist)
  end
end
rails does this automatically here: https://learn.co/tracks/full-stack-web-dev-with-react/rails/routes-and-resources/routing-and-nested-resources

6 Your application must provide a standard user authentication, including signup, login, logout, and passwords. You can use Devise but given the complexity of that system, you should also feel free to roll your own authentication logic.
//devise

7 Your authentication system should allow login from some other service. Facebook, twitter, foursquare, github, etc...
//omniauth

8 You must make use of a nested resource with the appropriate RESTful URLs. Additionally, your nested resource must provide a form that relates to the parent resource. Imagine an application with user profiles. You might represent a person's profile via the RESTful URL of /profiles/1, where 1 is the primary key of the profile. If the person wanted to add pictures to their profile, you could represent that as a nested resource of /profiles/1/pictures, listing all pictures belonging to profile 1. The route /profiles/1/pictures/new would allow me to upload a new picture to profile 1. Focus on making a working application first and then adding more complexity. Making a nested URL resource like '/divisions/:id/teams/new' is great. Having a complex nested resource like 'countries/:id/sports/:id/divisions/:id/teams/new' is going to make this much harder on you.
//scaffolding

9 Your forms should correctly display validation errors. Your fields should be enclosed within a fields_with_errors class and error messages describing the validation failures must be present within the view.
//scaffold generator

10 Your application must be, within reason, a DRY (Do-Not-Repeat-Yourself) rails app. Logic present in your controllers should be encapsulated as methods in your models. Your views should use helper methods and partials to be as logic-less as possible. Follow patterns in the Rails Style Guide and the Ruby Style Guide.
